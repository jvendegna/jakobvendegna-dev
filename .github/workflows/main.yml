name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'
          
      - name: Install Dependencies
        run: npm install
        
      - name: Format
        run: npm run format
        
      - name: Build
        run: npm run build
      
      - name: Artifact
        uses: actions/upload-artifact@v2
        with:
          name: public-dir
          path: public/
      
      - name: Version
        uses: paulhatch/semantic-version@v4.0.2
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}-prerelease${increment}"
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          change_path: "src/components src/content src/images src/pages src/templates"
          # Named version, will be used as suffix for name version tag
          namespace: site
          # Indicate whether short tags like 'v1' should be supported. If false only full
          # tags like 'v1.0.0' will be recognized.
          short_tags: false
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false


  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key: ${{ secrets.GCS_STORAGE_CRED }}
          export_default_credentials: true

      - name: Get Artifact
        uses: actions/download-artifact@v2
        with:
          name: public-dir
          
      - name: ls
        run: ls -a && echo "pwd" && pwd

      - name: Deploy
        run: gsutil cp -r . gs://${{ secrets.BUCKET }}
